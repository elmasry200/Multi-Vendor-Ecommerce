// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  couponCode     String @unique
  expiryDate     DateTime
  isActive Boolean  
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt   
}

model Banner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  link          String
  uploadedFiles String[] // Array of strings for file URLs
  isActive      Boolean 
  createdAt     DateTime @default(now()) // Auto-generate timestamp
  updatedAt     DateTime @updatedAt // Auto-update timestamp
}

model Category {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String   @unique
  uploadedFiles String[]  // Storing file paths or URLs
  description   String?
  
  products Product[]
  trainings Training[]

  marketIds       String[]  @db.ObjectId
  markets Market[] @relation(fields: [marketIds], references: [id])

  isActive      Boolean  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Market {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String 
  slug          String   @unique
  uploadedFiles String[]  // Optional array of file paths or URLs
  description   String?
  isActive      Boolean 

  categoryIds     String[]  @db.ObjectId
  categories Category[] @relation(fields: [categoryIds], references: [id])  
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String
  slug        String   @unique
  uploadedFiles String[]  // Optional array of file paths or URLs
  sku         String?
  barcode     String?
  productCode  String?
  unit     String?
  productPrice Float  
  salePrice   Float
  wholesalePrice Float
  wholesaleQty  Int 
  productStock Int
  qty  Int 
  tags        String[]

  isActive    Boolean  
  isWholesale Boolean

  category Category @relation (fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String @db.ObjectId 
 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
 
  orderItems  OrderItem[] 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Training {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId

  title String
  slug String @unique
  uploadedFiles String[] 
  description String?
  content Json
  isActive Boolean 

  category Category? @relation (fields: [categoryId], references: [id])
  categoryId  String @db.ObjectId  // Nullable foreign key

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified Boolean @default(false)

  role          UserRole @default(USER)
  verificationToken String?  
  farmerProfile FarmerProfile?
  profile UserProfile?
  order   Order[]
  products Product[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FarmerProfile  {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId

  code String
  contactPerson String?
  contactPersonPhone String?
  uploadedFiles String[]
  email String
  name String 
  notes String? 
  phone String
  physicalAddress String? 
  terms  String?
  isActive Boolean         
  landSize Int
  mainCrop String

 products String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @unique @db.ObjectId


  dateOfBirth DateTime?
  address String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  orderNumber   String
  OrderStatus    OrderStatus @default(PROCESSING)

  // Personal Details
  firstName     String
  lastName      String
  email  String
  phone   String
  
  // Shipping Details
  streetAddress String
  city          String
  country       String 
  district      String
  shippingCost  Float
  
  //payment Method
  paymentMethod String
  
  //Order Items
  orderItems   OrderItem[] 
  user User @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
 id            String   @id @default(auto()) @map("_id") @db.ObjectId
 orderId       String  @db.ObjectId
 productId     String  @db.ObjectId 
 title         String?
 imageUrl      String?
 quantity      Int
 price         Float  

 order         Order @relation(fields: [orderId], references: [id])
 product       Product @relation(fields: [productId], references: [id])

 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
} 